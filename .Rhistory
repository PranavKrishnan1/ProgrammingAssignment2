makeCacheMatrix = function(x = matrix()) {
m = NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get = function() x
setinverse = function(inv) m <<- inv
getinverse = function() m
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve <- function(j, ...) {
m <- j$getinverse()
if (!is.null(m)) {
message("getting cached data")
m
}
data <- j$get()
m <- solve(data, ...)
j$setinverse(m)
m
}
x=matrix(C(4,5,7,2,3,9,1,5,7),3,3)
l=makeCacheMatrix(x)
x=matrix(c(4,5,7,2,3,9,1,5,7),3,3)
l=makeCacheMatrix(x)
cacheSolve(l)
x=matrix(c(4,5,7,2,3,9,1,5,7),3,3)
l=makeCacheMatrix(x)
cacheSolve(l
cacheSolve(l)
cacheSolve(l)
makeCacheMatrix = function(x = matrix()) {
m = NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get = function() x
setinverse = function(inv) m <<- inv
getinverse = function() m
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve <- function(j, ...) {
m <- j$getinverse()
if (!is.null(m)) {
message("getting cached data")
m
}
data <- j$get()
m <- solve(data, ...)
j$setinverse(m)
m
}
makeCacheMatrix = function(x = matrix()) {
m = NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get = function() x
setinverse = function(inv) m <<- inv
getinverse = function() m
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve <- function(j, ...) {
m <- j$getinverse()
if (!is.null(m)) {
message("getting cached data")
m
}
data <- j$get()
m <- solve(data, ...)
j$setinverse(m)
m
}
